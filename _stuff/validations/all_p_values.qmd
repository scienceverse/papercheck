---
title: P Value Module sValidation
format:
  html:
    toc: true
    embed-resources: true
---

```{r}
#| message: false

# library(papercheck)
library(tidyverse)

# use local dev version
devtools::load_all("../../")
```

## all_p_values

This module just needs a logical check that it;'s mnatching what we'd hope and not what we don't.

```{r}
operators <- c("=", "<", ">", "~",  
               "\u2248", # ~~
               "\u2260", # !=
               "\u2264", # <=
               "\u2265", # >=
               "\u226A", # <<
               "\u226B" # >>
               ) |> paste(collapse = "")

pattern <- paste0(
  "\\bp-?(value)?\\s*", # ways to write p
  "[", operators, "]{1,2}\\s*", # 1-2 operators
  "(n\\.?s\\.?|\\d?\\.\\d+)(e-\\d+)?" # ns or valid numbers
)

expected <- c(
  "p=.05",
  "p\n=\n.05",
  "p = .05",
  "p < .05",
  "p > .05",
  "p <= .05",
  "p >= .05",
  "p == .05",
  "p << .05",
  "p >> .05",
  "p ≤ .05",
  "p ≥ .05",
  "p ≪ .05",
  "p ≫ .05",
  "p ≠ .05",
  "p-value = .02",
  "pvalue = .023",
  "p = 0.05",
  "p = 0.05229381290",
  "p = 1.2e-5",
  "p = n.s.",
  "p = ns"
)
not <- c(
  "up = 0.23",
  "p = stuff",
  "p = -0.5",
  "p less than 0.05",
  "p = 12.87"
)

table <- data.frame(
  text = c(expected, not),
  expected = rep(c(T, F), c(length(expected), length(not)))
)

table$observed <- grepl(pattern, table$text, "perl" = TRUE)

# filter to mismatches
table[table$expected != table$observed, ]
```

```{r}
all_p <- module_run(psychsci, "all_p_values")

ptable <- all_p$table |> 
  separate(text, c("p", "operator", "value"), sep = "\\s+", remove = FALSE, fill = "right") |>
  mutate(nval = as.numeric(value))

count(ptable, p, operator)
```

All instances of uppercase P are not p-values.

```{r}
all_p$table |>
  filter(grepl("P", text)) |>
  expand_text(psychsci) |>
  pull(expanded) |>
  unique()
```

## exact_p

Run code from module to get full table

```{r}
p <- all_p$table

  operators <- c("=", "<", ">", "~",
                 "\u2248", # ~~
                 "\u2260", # !=
                 "\u2264", # <=
                 "\u2265", # >=
                 "\u226A", # <<
                 "\u226B" # >>
  ) |> paste(collapse = "")

  # get operator
  pattern <- paste0("[", operators, "]{1,2}")
  matches <- gregexpr(pattern, p$text, perl = TRUE)
  p$p_comp <- regmatches(p$text, matches) |> sapply(`[[`, 1)

  # get value
  pattern <- paste0("(?<=[", operators, "]{1,2}).*$")
  matches <- gregexpr(pattern, p$text, perl = TRUE)
  p$p_value <- regmatches(p$text, matches) |> trimws()
  p$p_value <- suppressWarnings(as.numeric(p$p_value))

  p$imprecise <- p$p_comp == "<" & p$p_value > .001
  p$imprecise <- p$imprecise | !p$p_comp %in% c("=", "<")
  p$imprecise <- p$imprecise | is.na(p$p_value)
```

```{r}
ggplot(p, aes(x = p_value, color = p_comp)) +
  geom_density(linewidth = 1) +
  coord_cartesian(xlim = c(0, 1)) +
  guides(color = guide_legend(position = "inside")) +
  labs(x = "p-value", y = NULL, color = NULL,
       title = "P-Value Distribution by Operator") +
  scale_color_manual(values = c("firebrick", "darkgreen", "dodgerblue3", "darkorchid")) +
  theme_bw(base_size = 13) +
  theme(legend.position.inside = c(.2, .7),
        legend.background = element_blank())

ggsave("~/Desktop/pval.png", width = 7, height= 5)
```


