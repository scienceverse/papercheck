---
title: Effect Size Module Validation
format:
  html:
    toc: true
    embed-resources: true
---

```{r}
#| message: false

# library(papercheck)
library(tidyverse)
library(readxl)

# use local dev version
devtools::load_all("../../")
```

We'll validate this on the 250 open access Psych Sci papers.

```{r}
paper <- psychsci
```


## T-test

### Full set

Run code from the module to get the full set of sentences with a t-test, and the ones that are detected as having an effect size.

```{r}
# Regex to detect all t-tests
test_regex <- "\\bt\\s*\\(\\s*\\d+(\\.\\d+)?\\s*\\)\\s*=\\s*-?\\d+(\\.\\d+)?"
text_found_test <- paper |>
  search_text("=") |> # sentences with equal signs
  search_text("[0-9]") |> # sentences with numbers
  search_text(test_regex, perl = TRUE) # sentences with a relevant test

# Regex to detect effect sizes
test_es_regex <- "(cohen'?s\\s*)?\\b(d|b|g|r|f²?|η²|η²p|omega²|ω²|partial\\s+η²)\\s*[=≈<>\u2264\u2265]{1,3}\\s*-?\\d+(\\.\\d+)?"
text_found_es <- search_text(text_found_test, test_es_regex, perl = TRUE)
```

Add in the exact matching text:

```{r}
# get just t-test text
text_found_test_match <- search_text(
  text_found_test, test_regex, 
  perl = TRUE, return = "match") |>
  summarise(match_test = paste(text, collapse = "; "), 
            .by = c("div", "p", "s", "id"))

text_found_test <- left_join(text_found_test, text_found_test_match, 
                             by = c("div", "p", "s", "id"))

# get just effect size text
text_found_es_match <- search_text(
  text_found_es, test_es_regex, 
  perl = TRUE, return = "match") |>
  summarise(match_es = paste(text, collapse = "; "), 
            .by = c("div", "p", "s", "id"))

text_found_es <- left_join(text_found_es, text_found_es_match, 
                             by = c("div", "p", "s", "id"))
```


Combine tables to create a validation set with preliminary labels for `has_t` and `has_es`.

```{r}
text_found_test$has_t <- TRUE
text_found_es$has_es <- TRUE

ttest_validation <- left_join(
  text_found_test, text_found_es, 
  by = c("text", "section", "header", "div", "p", "s", "id")
) |>
  mutate(has_es = ifelse(is.na(has_es), FALSE, has_es))
```

Write to a file for human coding.

```{r}
write_csv(ttest_validation, "effect_size_ttest_v1.csv", na = "")
```

* `text`: the full text of a sentence with one or more potential matches
* `match_test`: just the relevant `t(df)` text of any matches 
* `has_t`: T/F whether the regex detected a t-test
* `match_es`: just the relevant effect size text of any matches 
* `has_es`: whether the regex detected an effect size
* `checked`: mark this when you’ve checked this row

The columns `has_t` and `has_es` should be double-checked by a human.

### Validation

Load in the human-coded version.

```{r}
ttest_coded <- read_xlsx("effect_size_ttest_v1.xlsx")
```

Create the expected table and summary.

```{r}
exp_table <- ttest_coded |>
  filter(has_t, !has_es) |>
  select(id, text, div, p, s)

t_summary <- ttest_coded |>
  filter(has_t) |>
  count(id, has_es) |>
  pivot_wider(names_from = has_es, values_from = n) |>
  rename(ttests_with_es = `TRUE`, ttests_without_es = `FALSE`) |>
  mutate(
    ttests_with_es = replace_na(ttests_with_es, 0),
    ttests_without_es = replace_na(ttests_without_es, 0),
    ttests_n = ttests_with_es + ttests_without_es
  )

# add in papers with no t-tests
no_t <- info_table(paper, c()) |>
  anti_join(t_summary, by = "id") |>
  mutate(ttests_n = 0)

exp_summary <- bind_rows(t_summary, no_t)
```

Run the validation

```{r}
v1 <- validate(paper, "effect_size_ttest",
               table = exp_table, 
               summary = exp_summary)

v1
```

Explore mismatches

```{r}
v1$matches$table |> 
  filter(!match)
```




